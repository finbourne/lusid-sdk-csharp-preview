/*
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3438
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CreateDateRequest
    /// </summary>
    [DataContract(Name = "CreateDateRequest")]
    public partial class CreateDateRequest : IEquatable<CreateDateRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateDateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDateRequest" /> class.
        /// </summary>
        /// <param name="dateId">dateId (required).</param>
        /// <param name="fromUtc">fromUtc (required).</param>
        /// <param name="toUtc">toUtc (required).</param>
        /// <param name="timeZone">timeZone (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="type">type.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="sourceData">sourceData.</param>
        public CreateDateRequest(string dateId = default(string), DateTimeOffset fromUtc = default(DateTimeOffset), DateTimeOffset toUtc = default(DateTimeOffset), string timeZone = default(string), string description = default(string), string type = default(string), DateAttributes attributes = default(DateAttributes), Dictionary<string, string> sourceData = default(Dictionary<string, string>))
        {
            // to ensure "dateId" is required (not null)
            this.DateId = dateId ?? throw new ArgumentNullException("dateId is a required property for CreateDateRequest and cannot be null");
            this.FromUtc = fromUtc;
            this.ToUtc = toUtc;
            // to ensure "timeZone" is required (not null)
            this.TimeZone = timeZone ?? throw new ArgumentNullException("timeZone is a required property for CreateDateRequest and cannot be null");
            // to ensure "description" is required (not null)
            this.Description = description ?? throw new ArgumentNullException("description is a required property for CreateDateRequest and cannot be null");
            this.Type = type;
            this.Attributes = attributes;
            this.SourceData = sourceData;
        }

        /// <summary>
        /// Gets or Sets DateId
        /// </summary>
        [DataMember(Name = "dateId", IsRequired = true, EmitDefaultValue = false)]
        public string DateId { get; set; }

        /// <summary>
        /// Gets or Sets FromUtc
        /// </summary>
        [DataMember(Name = "fromUtc", IsRequired = true, EmitDefaultValue = false)]
        public DateTimeOffset FromUtc { get; set; }

        /// <summary>
        /// Gets or Sets ToUtc
        /// </summary>
        [DataMember(Name = "toUtc", IsRequired = true, EmitDefaultValue = false)]
        public DateTimeOffset ToUtc { get; set; }

        /// <summary>
        /// Gets or Sets TimeZone
        /// </summary>
        [DataMember(Name = "timeZone", IsRequired = true, EmitDefaultValue = false)]
        public string TimeZone { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public DateAttributes Attributes { get; set; }

        /// <summary>
        /// Gets or Sets SourceData
        /// </summary>
        [DataMember(Name = "sourceData", EmitDefaultValue = true)]
        public Dictionary<string, string> SourceData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateDateRequest {\n");
            sb.Append("  DateId: ").Append(DateId).Append("\n");
            sb.Append("  FromUtc: ").Append(FromUtc).Append("\n");
            sb.Append("  ToUtc: ").Append(ToUtc).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  SourceData: ").Append(SourceData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateDateRequest);
        }

        /// <summary>
        /// Returns true if CreateDateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateDateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateDateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DateId == input.DateId ||
                    (this.DateId != null &&
                    this.DateId.Equals(input.DateId))
                ) && 
                (
                    this.FromUtc == input.FromUtc ||
                    (this.FromUtc != null &&
                    this.FromUtc.Equals(input.FromUtc))
                ) && 
                (
                    this.ToUtc == input.ToUtc ||
                    (this.ToUtc != null &&
                    this.ToUtc.Equals(input.ToUtc))
                ) && 
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                ) && 
                (
                    this.SourceData == input.SourceData ||
                    this.SourceData != null &&
                    input.SourceData != null &&
                    this.SourceData.SequenceEqual(input.SourceData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DateId != null)
                    hashCode = hashCode * 59 + this.DateId.GetHashCode();
                if (this.FromUtc != null)
                    hashCode = hashCode * 59 + this.FromUtc.GetHashCode();
                if (this.ToUtc != null)
                    hashCode = hashCode * 59 + this.ToUtc.GetHashCode();
                if (this.TimeZone != null)
                    hashCode = hashCode * 59 + this.TimeZone.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.SourceData != null)
                    hashCode = hashCode * 59 + this.SourceData.GetHashCode();
                return hashCode;
            }
        }

    }
}
