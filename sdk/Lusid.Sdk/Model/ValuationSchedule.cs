/*
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3438
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Specification object for the valuation schedule, how do we determine which days we wish to perform a valuation upon.
    /// </summary>
    [DataContract(Name = "ValuationSchedule")]
    public partial class ValuationSchedule : IEquatable<ValuationSchedule>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValuationSchedule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ValuationSchedule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValuationSchedule" /> class.
        /// </summary>
        /// <param name="effectiveFrom">If present, the EffectiveFrom and EffectiveAt dates are interpreted as a range of dates for which to perform a valuation.  In this case, valuation is calculated for the portfolio(s) for each business day in the given range..</param>
        /// <param name="effectiveAt">The market data time, i.e. the time to run the valuation request effective of. (required).</param>
        /// <param name="tenor">Tenor, e.g \&quot;1D\&quot;, \&quot;1M\&quot; to be used in generating the date schedule when effectiveFrom and effectiveAt are both given and are not the same..</param>
        /// <param name="rollConvention">When Tenor is given and is not equal to \&quot;1D\&quot;, there may be cases where \&quot;date + tenor\&quot; land on non-business days around month end.  In that case, the RollConvention, e.g. modified following \&quot;MF\&quot; would be applied to determine the next GBD..</param>
        /// <param name="holidayCalendars">The holiday calendar(s) that should be used in determining the date schedule.  Holiday calendar(s) are supplied by their names, for example, \&quot;CoppClarke\&quot;.   Note that when the calendars are not available (e.g. when the user has insufficient permissions),   a recipe setting will be used to determine whether the whole batch should then fail or whether the calendar not being available should simply be ignored..</param>
        /// <param name="valuationDateTimes">If given, this is the exact set of dates on which to perform a valuation. This will replace/override all other specified values if given..</param>
        public ValuationSchedule(DateTimeOrCutLabel effectiveFrom = default(DateTimeOrCutLabel), DateTimeOrCutLabel effectiveAt = default(DateTimeOrCutLabel), string tenor = default(string), string rollConvention = default(string), List<string> holidayCalendars = default(List<string>), List<string> valuationDateTimes = default(List<string>))
        {
            // to ensure "effectiveAt" is required (not null)
            this.EffectiveAt = effectiveAt ?? throw new ArgumentNullException("effectiveAt is a required property for ValuationSchedule and cannot be null");
            this.EffectiveFrom = effectiveFrom;
            this.Tenor = tenor;
            this.RollConvention = rollConvention;
            this.HolidayCalendars = holidayCalendars;
            this.ValuationDateTimes = valuationDateTimes;
        }

        /// <summary>
        /// If present, the EffectiveFrom and EffectiveAt dates are interpreted as a range of dates for which to perform a valuation.  In this case, valuation is calculated for the portfolio(s) for each business day in the given range.
        /// </summary>
        /// <value>If present, the EffectiveFrom and EffectiveAt dates are interpreted as a range of dates for which to perform a valuation.  In this case, valuation is calculated for the portfolio(s) for each business day in the given range.</value>
        [DataMember(Name = "effectiveFrom", EmitDefaultValue = true)]
        public DateTimeOrCutLabel EffectiveFrom { get; set; }

        /// <summary>
        /// The market data time, i.e. the time to run the valuation request effective of.
        /// </summary>
        /// <value>The market data time, i.e. the time to run the valuation request effective of.</value>
        [DataMember(Name = "effectiveAt", IsRequired = true, EmitDefaultValue = false)]
        public DateTimeOrCutLabel EffectiveAt { get; set; }

        /// <summary>
        /// Tenor, e.g \&quot;1D\&quot;, \&quot;1M\&quot; to be used in generating the date schedule when effectiveFrom and effectiveAt are both given and are not the same.
        /// </summary>
        /// <value>Tenor, e.g \&quot;1D\&quot;, \&quot;1M\&quot; to be used in generating the date schedule when effectiveFrom and effectiveAt are both given and are not the same.</value>
        [DataMember(Name = "tenor", EmitDefaultValue = true)]
        public string Tenor { get; set; }

        /// <summary>
        /// When Tenor is given and is not equal to \&quot;1D\&quot;, there may be cases where \&quot;date + tenor\&quot; land on non-business days around month end.  In that case, the RollConvention, e.g. modified following \&quot;MF\&quot; would be applied to determine the next GBD.
        /// </summary>
        /// <value>When Tenor is given and is not equal to \&quot;1D\&quot;, there may be cases where \&quot;date + tenor\&quot; land on non-business days around month end.  In that case, the RollConvention, e.g. modified following \&quot;MF\&quot; would be applied to determine the next GBD.</value>
        [DataMember(Name = "rollConvention", EmitDefaultValue = true)]
        public string RollConvention { get; set; }

        /// <summary>
        /// The holiday calendar(s) that should be used in determining the date schedule.  Holiday calendar(s) are supplied by their names, for example, \&quot;CoppClarke\&quot;.   Note that when the calendars are not available (e.g. when the user has insufficient permissions),   a recipe setting will be used to determine whether the whole batch should then fail or whether the calendar not being available should simply be ignored.
        /// </summary>
        /// <value>The holiday calendar(s) that should be used in determining the date schedule.  Holiday calendar(s) are supplied by their names, for example, \&quot;CoppClarke\&quot;.   Note that when the calendars are not available (e.g. when the user has insufficient permissions),   a recipe setting will be used to determine whether the whole batch should then fail or whether the calendar not being available should simply be ignored.</value>
        [DataMember(Name = "holidayCalendars", EmitDefaultValue = true)]
        public List<string> HolidayCalendars { get; set; }

        /// <summary>
        /// If given, this is the exact set of dates on which to perform a valuation. This will replace/override all other specified values if given.
        /// </summary>
        /// <value>If given, this is the exact set of dates on which to perform a valuation. This will replace/override all other specified values if given.</value>
        [DataMember(Name = "valuationDateTimes", EmitDefaultValue = true)]
        public List<string> ValuationDateTimes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValuationSchedule {\n");
            sb.Append("  EffectiveFrom: ").Append(EffectiveFrom).Append("\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("  Tenor: ").Append(Tenor).Append("\n");
            sb.Append("  RollConvention: ").Append(RollConvention).Append("\n");
            sb.Append("  HolidayCalendars: ").Append(HolidayCalendars).Append("\n");
            sb.Append("  ValuationDateTimes: ").Append(ValuationDateTimes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValuationSchedule);
        }

        /// <summary>
        /// Returns true if ValuationSchedule instances are equal
        /// </summary>
        /// <param name="input">Instance of ValuationSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValuationSchedule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EffectiveFrom == input.EffectiveFrom ||
                    (this.EffectiveFrom != null &&
                    this.EffectiveFrom.Equals(input.EffectiveFrom))
                ) && 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                ) && 
                (
                    this.Tenor == input.Tenor ||
                    (this.Tenor != null &&
                    this.Tenor.Equals(input.Tenor))
                ) && 
                (
                    this.RollConvention == input.RollConvention ||
                    (this.RollConvention != null &&
                    this.RollConvention.Equals(input.RollConvention))
                ) && 
                (
                    this.HolidayCalendars == input.HolidayCalendars ||
                    this.HolidayCalendars != null &&
                    input.HolidayCalendars != null &&
                    this.HolidayCalendars.SequenceEqual(input.HolidayCalendars)
                ) && 
                (
                    this.ValuationDateTimes == input.ValuationDateTimes ||
                    this.ValuationDateTimes != null &&
                    input.ValuationDateTimes != null &&
                    this.ValuationDateTimes.SequenceEqual(input.ValuationDateTimes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EffectiveFrom != null)
                    hashCode = hashCode * 59 + this.EffectiveFrom.GetHashCode();
                if (this.EffectiveAt != null)
                    hashCode = hashCode * 59 + this.EffectiveAt.GetHashCode();
                if (this.Tenor != null)
                    hashCode = hashCode * 59 + this.Tenor.GetHashCode();
                if (this.RollConvention != null)
                    hashCode = hashCode * 59 + this.RollConvention.GetHashCode();
                if (this.HolidayCalendars != null)
                    hashCode = hashCode * 59 + this.HolidayCalendars.GetHashCode();
                if (this.ValuationDateTimes != null)
                    hashCode = hashCode * 59 + this.ValuationDateTimes.GetHashCode();
                return hashCode;
            }
        }

    }
}
