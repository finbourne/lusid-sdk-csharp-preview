/*
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3439
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Specification class consisting of parameters for BucketedCashFlow endpoint.
    /// </summary>
    [DataContract(Name = "BucketedCashFlowRequest")]
    public partial class BucketedCashFlowRequest : IEquatable<BucketedCashFlowRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BucketedCashFlowRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BucketedCashFlowRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BucketedCashFlowRequest" /> class.
        /// </summary>
        /// <param name="roundingMethod">When bucketing, there is not a unique way to allocate the bucket points.  RoundingMethod    Supported string (enumeration) values are: [RoundDown, RoundUp]. (required).</param>
        /// <param name="bucketingDates">A list of dates to perform cashflow bucketing upon.  If this is provided, the list of tenors for bucketing should be empty..</param>
        /// <param name="bucketTenors">A list of tenors to perform cashflow bucketing upon.  If this is provided, the list of dates for bucketing should be empty..</param>
        /// <param name="effectiveAt">The valuation (pricing) effective datetime or cut label (inclusive) at which to evaluate the cashflows.  This determines whether cashflows are evaluated in a historic or forward looking context and will, for certain models, affect where data is looked up.  For example, on a swap if the effectiveAt is in the middle of the window, cashflows before it will be historic and resets assumed to exist where if the effectiveAt  is before the start of the range they are forward looking and will be expectations assuming the model supports that.  There is evidently a presumption here about availability of data and that the effectiveAt is realistically on or before the real-world today..</param>
        /// <param name="windowStart">The lower bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.  There is no lower bound if this is not specified..</param>
        /// <param name="windowEnd">The upper bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.  The upper bound defaults to &#39;today&#39; if it is not specified.</param>
        /// <param name="recipeId">recipeId.</param>
        /// <param name="reportCurrency">Three letter ISO currency string indicating what currency to report in for ReportCurrency denominated queries.  If not present, then the currency of the relevant portfolio will be used in its place..</param>
        /// <param name="asAt">The asAt date to use.</param>
        public BucketedCashFlowRequest(string roundingMethod = default(string), List<DateTimeOffset> bucketingDates = default(List<DateTimeOffset>), List<string> bucketTenors = default(List<string>), string effectiveAt = default(string), string windowStart = default(string), string windowEnd = default(string), ResourceId recipeId = default(ResourceId), string reportCurrency = default(string), DateTimeOffset? asAt = default(DateTimeOffset?))
        {
            // to ensure "roundingMethod" is required (not null)
            this.RoundingMethod = roundingMethod ?? throw new ArgumentNullException("roundingMethod is a required property for BucketedCashFlowRequest and cannot be null");
            this.BucketingDates = bucketingDates;
            this.BucketTenors = bucketTenors;
            this.EffectiveAt = effectiveAt;
            this.WindowStart = windowStart;
            this.WindowEnd = windowEnd;
            this.RecipeId = recipeId;
            this.ReportCurrency = reportCurrency;
            this.AsAt = asAt;
        }

        /// <summary>
        /// When bucketing, there is not a unique way to allocate the bucket points.  RoundingMethod    Supported string (enumeration) values are: [RoundDown, RoundUp].
        /// </summary>
        /// <value>When bucketing, there is not a unique way to allocate the bucket points.  RoundingMethod    Supported string (enumeration) values are: [RoundDown, RoundUp].</value>
        [DataMember(Name = "roundingMethod", IsRequired = true, EmitDefaultValue = false)]
        public string RoundingMethod { get; set; }

        /// <summary>
        /// A list of dates to perform cashflow bucketing upon.  If this is provided, the list of tenors for bucketing should be empty.
        /// </summary>
        /// <value>A list of dates to perform cashflow bucketing upon.  If this is provided, the list of tenors for bucketing should be empty.</value>
        [DataMember(Name = "bucketingDates", EmitDefaultValue = true)]
        public List<DateTimeOffset> BucketingDates { get; set; }

        /// <summary>
        /// A list of tenors to perform cashflow bucketing upon.  If this is provided, the list of dates for bucketing should be empty.
        /// </summary>
        /// <value>A list of tenors to perform cashflow bucketing upon.  If this is provided, the list of dates for bucketing should be empty.</value>
        [DataMember(Name = "bucketTenors", EmitDefaultValue = true)]
        public List<string> BucketTenors { get; set; }

        /// <summary>
        /// The valuation (pricing) effective datetime or cut label (inclusive) at which to evaluate the cashflows.  This determines whether cashflows are evaluated in a historic or forward looking context and will, for certain models, affect where data is looked up.  For example, on a swap if the effectiveAt is in the middle of the window, cashflows before it will be historic and resets assumed to exist where if the effectiveAt  is before the start of the range they are forward looking and will be expectations assuming the model supports that.  There is evidently a presumption here about availability of data and that the effectiveAt is realistically on or before the real-world today.
        /// </summary>
        /// <value>The valuation (pricing) effective datetime or cut label (inclusive) at which to evaluate the cashflows.  This determines whether cashflows are evaluated in a historic or forward looking context and will, for certain models, affect where data is looked up.  For example, on a swap if the effectiveAt is in the middle of the window, cashflows before it will be historic and resets assumed to exist where if the effectiveAt  is before the start of the range they are forward looking and will be expectations assuming the model supports that.  There is evidently a presumption here about availability of data and that the effectiveAt is realistically on or before the real-world today.</value>
        [DataMember(Name = "effectiveAt", EmitDefaultValue = true)]
        public string EffectiveAt { get; set; }

        /// <summary>
        /// The lower bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.  There is no lower bound if this is not specified.
        /// </summary>
        /// <value>The lower bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.  There is no lower bound if this is not specified.</value>
        [DataMember(Name = "windowStart", EmitDefaultValue = true)]
        public string WindowStart { get; set; }

        /// <summary>
        /// The upper bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.  The upper bound defaults to &#39;today&#39; if it is not specified
        /// </summary>
        /// <value>The upper bound effective datetime or cut label (inclusive) from which to retrieve the cashflows.  The upper bound defaults to &#39;today&#39; if it is not specified</value>
        [DataMember(Name = "windowEnd", EmitDefaultValue = true)]
        public string WindowEnd { get; set; }

        /// <summary>
        /// Gets or Sets RecipeId
        /// </summary>
        [DataMember(Name = "recipeId", EmitDefaultValue = false)]
        public ResourceId RecipeId { get; set; }

        /// <summary>
        /// Three letter ISO currency string indicating what currency to report in for ReportCurrency denominated queries.  If not present, then the currency of the relevant portfolio will be used in its place.
        /// </summary>
        /// <value>Three letter ISO currency string indicating what currency to report in for ReportCurrency denominated queries.  If not present, then the currency of the relevant portfolio will be used in its place.</value>
        [DataMember(Name = "reportCurrency", EmitDefaultValue = true)]
        public string ReportCurrency { get; set; }

        /// <summary>
        /// The asAt date to use
        /// </summary>
        /// <value>The asAt date to use</value>
        [DataMember(Name = "asAt", EmitDefaultValue = true)]
        public DateTimeOffset? AsAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BucketedCashFlowRequest {\n");
            sb.Append("  RoundingMethod: ").Append(RoundingMethod).Append("\n");
            sb.Append("  BucketingDates: ").Append(BucketingDates).Append("\n");
            sb.Append("  BucketTenors: ").Append(BucketTenors).Append("\n");
            sb.Append("  EffectiveAt: ").Append(EffectiveAt).Append("\n");
            sb.Append("  WindowStart: ").Append(WindowStart).Append("\n");
            sb.Append("  WindowEnd: ").Append(WindowEnd).Append("\n");
            sb.Append("  RecipeId: ").Append(RecipeId).Append("\n");
            sb.Append("  ReportCurrency: ").Append(ReportCurrency).Append("\n");
            sb.Append("  AsAt: ").Append(AsAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BucketedCashFlowRequest);
        }

        /// <summary>
        /// Returns true if BucketedCashFlowRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of BucketedCashFlowRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BucketedCashFlowRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RoundingMethod == input.RoundingMethod ||
                    (this.RoundingMethod != null &&
                    this.RoundingMethod.Equals(input.RoundingMethod))
                ) && 
                (
                    this.BucketingDates == input.BucketingDates ||
                    this.BucketingDates != null &&
                    input.BucketingDates != null &&
                    this.BucketingDates.SequenceEqual(input.BucketingDates)
                ) && 
                (
                    this.BucketTenors == input.BucketTenors ||
                    this.BucketTenors != null &&
                    input.BucketTenors != null &&
                    this.BucketTenors.SequenceEqual(input.BucketTenors)
                ) && 
                (
                    this.EffectiveAt == input.EffectiveAt ||
                    (this.EffectiveAt != null &&
                    this.EffectiveAt.Equals(input.EffectiveAt))
                ) && 
                (
                    this.WindowStart == input.WindowStart ||
                    (this.WindowStart != null &&
                    this.WindowStart.Equals(input.WindowStart))
                ) && 
                (
                    this.WindowEnd == input.WindowEnd ||
                    (this.WindowEnd != null &&
                    this.WindowEnd.Equals(input.WindowEnd))
                ) && 
                (
                    this.RecipeId == input.RecipeId ||
                    (this.RecipeId != null &&
                    this.RecipeId.Equals(input.RecipeId))
                ) && 
                (
                    this.ReportCurrency == input.ReportCurrency ||
                    (this.ReportCurrency != null &&
                    this.ReportCurrency.Equals(input.ReportCurrency))
                ) && 
                (
                    this.AsAt == input.AsAt ||
                    (this.AsAt != null &&
                    this.AsAt.Equals(input.AsAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RoundingMethod != null)
                    hashCode = hashCode * 59 + this.RoundingMethod.GetHashCode();
                if (this.BucketingDates != null)
                    hashCode = hashCode * 59 + this.BucketingDates.GetHashCode();
                if (this.BucketTenors != null)
                    hashCode = hashCode * 59 + this.BucketTenors.GetHashCode();
                if (this.EffectiveAt != null)
                    hashCode = hashCode * 59 + this.EffectiveAt.GetHashCode();
                if (this.WindowStart != null)
                    hashCode = hashCode * 59 + this.WindowStart.GetHashCode();
                if (this.WindowEnd != null)
                    hashCode = hashCode * 59 + this.WindowEnd.GetHashCode();
                if (this.RecipeId != null)
                    hashCode = hashCode * 59 + this.RecipeId.GetHashCode();
                if (this.ReportCurrency != null)
                    hashCode = hashCode * 59 + this.ReportCurrency.GetHashCode();
                if (this.AsAt != null)
                    hashCode = hashCode * 59 + this.AsAt.GetHashCode();
                return hashCode;
            }
        }

    }
}
