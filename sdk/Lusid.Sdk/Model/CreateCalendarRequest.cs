/*
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3439
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CreateCalendarRequest
    /// </summary>
    [DataContract(Name = "CreateCalendarRequest")]
    public partial class CreateCalendarRequest : IEquatable<CreateCalendarRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCalendarRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateCalendarRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCalendarRequest" /> class.
        /// </summary>
        /// <param name="calendarId">calendarId (required).</param>
        /// <param name="calendarType">calendarType (required).</param>
        /// <param name="weekendMask">weekendMask (required).</param>
        /// <param name="sourceProvider">sourceProvider (required).</param>
        /// <param name="properties">properties.</param>
        public CreateCalendarRequest(ResourceId calendarId = default(ResourceId), string calendarType = default(string), WeekendMask weekendMask = default(WeekendMask), string sourceProvider = default(string), List<Property> properties = default(List<Property>))
        {
            // to ensure "calendarId" is required (not null)
            this.CalendarId = calendarId ?? throw new ArgumentNullException("calendarId is a required property for CreateCalendarRequest and cannot be null");
            // to ensure "calendarType" is required (not null)
            this.CalendarType = calendarType ?? throw new ArgumentNullException("calendarType is a required property for CreateCalendarRequest and cannot be null");
            // to ensure "weekendMask" is required (not null)
            this.WeekendMask = weekendMask ?? throw new ArgumentNullException("weekendMask is a required property for CreateCalendarRequest and cannot be null");
            // to ensure "sourceProvider" is required (not null)
            this.SourceProvider = sourceProvider ?? throw new ArgumentNullException("sourceProvider is a required property for CreateCalendarRequest and cannot be null");
            this.Properties = properties;
        }

        /// <summary>
        /// Gets or Sets CalendarId
        /// </summary>
        [DataMember(Name = "calendarId", IsRequired = true, EmitDefaultValue = false)]
        public ResourceId CalendarId { get; set; }

        /// <summary>
        /// Gets or Sets CalendarType
        /// </summary>
        [DataMember(Name = "calendarType", IsRequired = true, EmitDefaultValue = false)]
        public string CalendarType { get; set; }

        /// <summary>
        /// Gets or Sets WeekendMask
        /// </summary>
        [DataMember(Name = "weekendMask", IsRequired = true, EmitDefaultValue = false)]
        public WeekendMask WeekendMask { get; set; }

        /// <summary>
        /// Gets or Sets SourceProvider
        /// </summary>
        [DataMember(Name = "sourceProvider", IsRequired = true, EmitDefaultValue = false)]
        public string SourceProvider { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public List<Property> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateCalendarRequest {\n");
            sb.Append("  CalendarId: ").Append(CalendarId).Append("\n");
            sb.Append("  CalendarType: ").Append(CalendarType).Append("\n");
            sb.Append("  WeekendMask: ").Append(WeekendMask).Append("\n");
            sb.Append("  SourceProvider: ").Append(SourceProvider).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateCalendarRequest);
        }

        /// <summary>
        /// Returns true if CreateCalendarRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateCalendarRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCalendarRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CalendarId == input.CalendarId ||
                    (this.CalendarId != null &&
                    this.CalendarId.Equals(input.CalendarId))
                ) && 
                (
                    this.CalendarType == input.CalendarType ||
                    (this.CalendarType != null &&
                    this.CalendarType.Equals(input.CalendarType))
                ) && 
                (
                    this.WeekendMask == input.WeekendMask ||
                    (this.WeekendMask != null &&
                    this.WeekendMask.Equals(input.WeekendMask))
                ) && 
                (
                    this.SourceProvider == input.SourceProvider ||
                    (this.SourceProvider != null &&
                    this.SourceProvider.Equals(input.SourceProvider))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CalendarId != null)
                    hashCode = hashCode * 59 + this.CalendarId.GetHashCode();
                if (this.CalendarType != null)
                    hashCode = hashCode * 59 + this.CalendarType.GetHashCode();
                if (this.WeekendMask != null)
                    hashCode = hashCode * 59 + this.WeekendMask.GetHashCode();
                if (this.SourceProvider != null)
                    hashCode = hashCode * 59 + this.SourceProvider.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                return hashCode;
            }
        }

    }
}
