/*
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3438
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// IL Fx-Forward Instrument; Lusid-ibor internal representation of a Fx Forward instrument                             A future contract, entered into on the start date at an initial reference spot price has zero initial value. It is a committment to buy a certain number of               contracts of a certain size at a date in the future.
    /// </summary>
    [DataContract(Name = "Future")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentType")]
    public partial class Future : LusidInstrument, IEquatable<Future>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Future" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Future() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Future" /> class.
        /// </summary>
        /// <param name="startDate">The start date of the instrument. This is normally synonymous with the trade-date. (required).</param>
        /// <param name="maturityDate">The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.              For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as              Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date (required).</param>
        /// <param name="identifiers">external market codes and identifiers for the bond, e.g. ISIN. (required).</param>
        /// <param name="contractDetails">contractDetails (required).</param>
        /// <param name="contracts">The number of contracts held.</param>
        /// <param name="refSpotPrice">The reference spot price for the future at which the contract was entered into..</param>
        /// <param name="underlying">underlying (required).</param>
        /// <param name="instrumentType">The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo (required) (default to &quot;Future&quot;).</param>
        public Future(DateTimeOffset startDate = default(DateTimeOffset), DateTimeOffset maturityDate = default(DateTimeOffset), Dictionary<string, string> identifiers = default(Dictionary<string, string>), FuturesContractDetails contractDetails = default(FuturesContractDetails), decimal contracts = default(decimal), decimal refSpotPrice = default(decimal), LusidInstrument underlying = default(LusidInstrument), InstrumentTypeEnum instrumentType = default(InstrumentTypeEnum)) : base(instrumentType)
        {
            this.StartDate = startDate;
            this.MaturityDate = maturityDate;
            // to ensure "identifiers" is required (not null)
            this.Identifiers = identifiers ?? throw new ArgumentNullException("identifiers is a required property for Future and cannot be null");
            // to ensure "contractDetails" is required (not null)
            this.ContractDetails = contractDetails ?? throw new ArgumentNullException("contractDetails is a required property for Future and cannot be null");
            // to ensure "underlying" is required (not null)
            this.Underlying = underlying ?? throw new ArgumentNullException("underlying is a required property for Future and cannot be null");
            this.Contracts = contracts;
            this.RefSpotPrice = refSpotPrice;
        }

        /// <summary>
        /// The start date of the instrument. This is normally synonymous with the trade-date.
        /// </summary>
        /// <value>The start date of the instrument. This is normally synonymous with the trade-date.</value>
        [DataMember(Name = "startDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.              For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as              Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date
        /// </summary>
        /// <value>The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.              For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as              Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date</value>
        [DataMember(Name = "maturityDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTimeOffset MaturityDate { get; set; }

        /// <summary>
        /// external market codes and identifiers for the bond, e.g. ISIN.
        /// </summary>
        /// <value>external market codes and identifiers for the bond, e.g. ISIN.</value>
        [DataMember(Name = "identifiers", IsRequired = true, EmitDefaultValue = false)]
        public Dictionary<string, string> Identifiers { get; set; }

        /// <summary>
        /// Gets or Sets ContractDetails
        /// </summary>
        [DataMember(Name = "contractDetails", IsRequired = true, EmitDefaultValue = false)]
        public FuturesContractDetails ContractDetails { get; set; }

        /// <summary>
        /// The number of contracts held
        /// </summary>
        /// <value>The number of contracts held</value>
        [DataMember(Name = "contracts", EmitDefaultValue = true)]
        public decimal Contracts { get; set; }

        /// <summary>
        /// The reference spot price for the future at which the contract was entered into.
        /// </summary>
        /// <value>The reference spot price for the future at which the contract was entered into.</value>
        [DataMember(Name = "refSpotPrice", EmitDefaultValue = true)]
        public decimal RefSpotPrice { get; set; }

        /// <summary>
        /// Gets or Sets Underlying
        /// </summary>
        [DataMember(Name = "underlying", IsRequired = true, EmitDefaultValue = false)]
        public LusidInstrument Underlying { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Future {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  Identifiers: ").Append(Identifiers).Append("\n");
            sb.Append("  ContractDetails: ").Append(ContractDetails).Append("\n");
            sb.Append("  Contracts: ").Append(Contracts).Append("\n");
            sb.Append("  RefSpotPrice: ").Append(RefSpotPrice).Append("\n");
            sb.Append("  Underlying: ").Append(Underlying).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Future);
        }

        /// <summary>
        /// Returns true if Future instances are equal
        /// </summary>
        /// <param name="input">Instance of Future to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Future input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && base.Equals(input) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && base.Equals(input) && 
                (
                    this.Identifiers == input.Identifiers ||
                    this.Identifiers != null &&
                    input.Identifiers != null &&
                    this.Identifiers.SequenceEqual(input.Identifiers)
                ) && base.Equals(input) && 
                (
                    this.ContractDetails == input.ContractDetails ||
                    (this.ContractDetails != null &&
                    this.ContractDetails.Equals(input.ContractDetails))
                ) && base.Equals(input) && 
                (
                    this.Contracts == input.Contracts ||
                    this.Contracts.Equals(input.Contracts)
                ) && base.Equals(input) && 
                (
                    this.RefSpotPrice == input.RefSpotPrice ||
                    this.RefSpotPrice.Equals(input.RefSpotPrice)
                ) && base.Equals(input) && 
                (
                    this.Underlying == input.Underlying ||
                    (this.Underlying != null &&
                    this.Underlying.Equals(input.Underlying))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.MaturityDate != null)
                    hashCode = hashCode * 59 + this.MaturityDate.GetHashCode();
                if (this.Identifiers != null)
                    hashCode = hashCode * 59 + this.Identifiers.GetHashCode();
                if (this.ContractDetails != null)
                    hashCode = hashCode * 59 + this.ContractDetails.GetHashCode();
                hashCode = hashCode * 59 + this.Contracts.GetHashCode();
                hashCode = hashCode * 59 + this.RefSpotPrice.GetHashCode();
                if (this.Underlying != null)
                    hashCode = hashCode * 59 + this.Underlying.GetHashCode();
                return hashCode;
            }
        }

    }
}
