/*
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3438
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Representation of a Relationship between a requested entity with the stated entity as RelatedEntityId
    /// </summary>
    [DataContract(Name = "Relationship")]
    public partial class Relationship : IEquatable<Relationship>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Relationship" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Relationship() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Relationship" /> class.
        /// </summary>
        /// <param name="version">version.</param>
        /// <param name="relationshipDefinitionId">relationshipDefinitionId (required).</param>
        /// <param name="relatedEntity">relatedEntity (required).</param>
        /// <param name="traversalDirection">Direction of relationship betwen the requested entity and related entity. This can be &#39;In&#39; or &#39;Out&#39;. Read more about relationships traversal direction in LUSID Knowledge Base here https://support.lusid.com/relationships. (required).</param>
        /// <param name="traversalDescription">Description of the relationship based on relationship&#39;s traversal direction. If &#39;TraversalDirection&#39; is &#39;Out&#39;, this description would be &#39;OutwardDescription&#39; from the associated relationship definition. If &#39;TraversalDirection&#39; is &#39;In&#39;, this description would be &#39;InwardDescription&#39; from the associated relationship definition. (required).</param>
        /// <param name="effectiveFrom">The effective datetime from which the relationship is valid..</param>
        public Relationship(Version version = default(Version), ResourceId relationshipDefinitionId = default(ResourceId), RelatedEntity relatedEntity = default(RelatedEntity), string traversalDirection = default(string), string traversalDescription = default(string), DateTimeOffset effectiveFrom = default(DateTimeOffset))
        {
            // to ensure "relationshipDefinitionId" is required (not null)
            this.RelationshipDefinitionId = relationshipDefinitionId ?? throw new ArgumentNullException("relationshipDefinitionId is a required property for Relationship and cannot be null");
            // to ensure "relatedEntity" is required (not null)
            this.RelatedEntity = relatedEntity ?? throw new ArgumentNullException("relatedEntity is a required property for Relationship and cannot be null");
            // to ensure "traversalDirection" is required (not null)
            this.TraversalDirection = traversalDirection ?? throw new ArgumentNullException("traversalDirection is a required property for Relationship and cannot be null");
            // to ensure "traversalDescription" is required (not null)
            this.TraversalDescription = traversalDescription ?? throw new ArgumentNullException("traversalDescription is a required property for Relationship and cannot be null");
            this.Version = version;
            this.EffectiveFrom = effectiveFrom;
        }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public Version Version { get; set; }

        /// <summary>
        /// Gets or Sets RelationshipDefinitionId
        /// </summary>
        [DataMember(Name = "relationshipDefinitionId", IsRequired = true, EmitDefaultValue = false)]
        public ResourceId RelationshipDefinitionId { get; set; }

        /// <summary>
        /// Gets or Sets RelatedEntity
        /// </summary>
        [DataMember(Name = "relatedEntity", IsRequired = true, EmitDefaultValue = false)]
        public RelatedEntity RelatedEntity { get; set; }

        /// <summary>
        /// Direction of relationship betwen the requested entity and related entity. This can be &#39;In&#39; or &#39;Out&#39;. Read more about relationships traversal direction in LUSID Knowledge Base here https://support.lusid.com/relationships.
        /// </summary>
        /// <value>Direction of relationship betwen the requested entity and related entity. This can be &#39;In&#39; or &#39;Out&#39;. Read more about relationships traversal direction in LUSID Knowledge Base here https://support.lusid.com/relationships.</value>
        [DataMember(Name = "traversalDirection", IsRequired = true, EmitDefaultValue = false)]
        public string TraversalDirection { get; set; }

        /// <summary>
        /// Description of the relationship based on relationship&#39;s traversal direction. If &#39;TraversalDirection&#39; is &#39;Out&#39;, this description would be &#39;OutwardDescription&#39; from the associated relationship definition. If &#39;TraversalDirection&#39; is &#39;In&#39;, this description would be &#39;InwardDescription&#39; from the associated relationship definition.
        /// </summary>
        /// <value>Description of the relationship based on relationship&#39;s traversal direction. If &#39;TraversalDirection&#39; is &#39;Out&#39;, this description would be &#39;OutwardDescription&#39; from the associated relationship definition. If &#39;TraversalDirection&#39; is &#39;In&#39;, this description would be &#39;InwardDescription&#39; from the associated relationship definition.</value>
        [DataMember(Name = "traversalDescription", IsRequired = true, EmitDefaultValue = false)]
        public string TraversalDescription { get; set; }

        /// <summary>
        /// The effective datetime from which the relationship is valid.
        /// </summary>
        /// <value>The effective datetime from which the relationship is valid.</value>
        [DataMember(Name = "effectiveFrom", EmitDefaultValue = false)]
        public DateTimeOffset EffectiveFrom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Relationship {\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  RelationshipDefinitionId: ").Append(RelationshipDefinitionId).Append("\n");
            sb.Append("  RelatedEntity: ").Append(RelatedEntity).Append("\n");
            sb.Append("  TraversalDirection: ").Append(TraversalDirection).Append("\n");
            sb.Append("  TraversalDescription: ").Append(TraversalDescription).Append("\n");
            sb.Append("  EffectiveFrom: ").Append(EffectiveFrom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Relationship);
        }

        /// <summary>
        /// Returns true if Relationship instances are equal
        /// </summary>
        /// <param name="input">Instance of Relationship to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Relationship input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.RelationshipDefinitionId == input.RelationshipDefinitionId ||
                    (this.RelationshipDefinitionId != null &&
                    this.RelationshipDefinitionId.Equals(input.RelationshipDefinitionId))
                ) && 
                (
                    this.RelatedEntity == input.RelatedEntity ||
                    (this.RelatedEntity != null &&
                    this.RelatedEntity.Equals(input.RelatedEntity))
                ) && 
                (
                    this.TraversalDirection == input.TraversalDirection ||
                    (this.TraversalDirection != null &&
                    this.TraversalDirection.Equals(input.TraversalDirection))
                ) && 
                (
                    this.TraversalDescription == input.TraversalDescription ||
                    (this.TraversalDescription != null &&
                    this.TraversalDescription.Equals(input.TraversalDescription))
                ) && 
                (
                    this.EffectiveFrom == input.EffectiveFrom ||
                    (this.EffectiveFrom != null &&
                    this.EffectiveFrom.Equals(input.EffectiveFrom))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.RelationshipDefinitionId != null)
                    hashCode = hashCode * 59 + this.RelationshipDefinitionId.GetHashCode();
                if (this.RelatedEntity != null)
                    hashCode = hashCode * 59 + this.RelatedEntity.GetHashCode();
                if (this.TraversalDirection != null)
                    hashCode = hashCode * 59 + this.TraversalDirection.GetHashCode();
                if (this.TraversalDescription != null)
                    hashCode = hashCode * 59 + this.TraversalDescription.GetHashCode();
                if (this.EffectiveFrom != null)
                    hashCode = hashCode * 59 + this.EffectiveFrom.GetHashCode();
                return hashCode;
            }
        }

    }
}
