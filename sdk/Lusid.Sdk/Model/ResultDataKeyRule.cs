/*
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3439
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A rule that describes how we resolve (unit) result data.
    /// </summary>
    [DataContract(Name = "ResultDataKeyRule")]
    public partial class ResultDataKeyRule : IEquatable<ResultDataKeyRule>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultDataKeyRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ResultDataKeyRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultDataKeyRule" /> class.
        /// </summary>
        /// <param name="resourceKey">The result data key that identifies the address pattern that this is a rule for (required).</param>
        /// <param name="supplier">the result resource supplier (where the data comes from) (required).</param>
        /// <param name="dataScope">which is the scope in which the data should be found (required).</param>
        /// <param name="documentCode">document code that defines which document is desired (required).</param>
        /// <param name="quoteInterval">Shorthand for the time interval used to select result data. This must be a dot-separated string              specifying a start and end date, for example &#39;5D.0D&#39; to look back 5 days from today (0 days ago)..</param>
        /// <param name="asAt">The AsAt predicate specification..</param>
        public ResultDataKeyRule(string resourceKey = default(string), string supplier = default(string), string dataScope = default(string), string documentCode = default(string), string quoteInterval = default(string), DateTimeOffset? asAt = default(DateTimeOffset?))
        {
            // to ensure "resourceKey" is required (not null)
            this.ResourceKey = resourceKey ?? throw new ArgumentNullException("resourceKey is a required property for ResultDataKeyRule and cannot be null");
            // to ensure "supplier" is required (not null)
            this.Supplier = supplier ?? throw new ArgumentNullException("supplier is a required property for ResultDataKeyRule and cannot be null");
            // to ensure "dataScope" is required (not null)
            this.DataScope = dataScope ?? throw new ArgumentNullException("dataScope is a required property for ResultDataKeyRule and cannot be null");
            // to ensure "documentCode" is required (not null)
            this.DocumentCode = documentCode ?? throw new ArgumentNullException("documentCode is a required property for ResultDataKeyRule and cannot be null");
            this.QuoteInterval = quoteInterval;
            this.AsAt = asAt;
        }

        /// <summary>
        /// The result data key that identifies the address pattern that this is a rule for
        /// </summary>
        /// <value>The result data key that identifies the address pattern that this is a rule for</value>
        [DataMember(Name = "resourceKey", IsRequired = true, EmitDefaultValue = false)]
        public string ResourceKey { get; set; }

        /// <summary>
        /// the result resource supplier (where the data comes from)
        /// </summary>
        /// <value>the result resource supplier (where the data comes from)</value>
        [DataMember(Name = "supplier", IsRequired = true, EmitDefaultValue = false)]
        public string Supplier { get; set; }

        /// <summary>
        /// which is the scope in which the data should be found
        /// </summary>
        /// <value>which is the scope in which the data should be found</value>
        [DataMember(Name = "dataScope", IsRequired = true, EmitDefaultValue = false)]
        public string DataScope { get; set; }

        /// <summary>
        /// document code that defines which document is desired
        /// </summary>
        /// <value>document code that defines which document is desired</value>
        [DataMember(Name = "documentCode", IsRequired = true, EmitDefaultValue = false)]
        public string DocumentCode { get; set; }

        /// <summary>
        /// Shorthand for the time interval used to select result data. This must be a dot-separated string              specifying a start and end date, for example &#39;5D.0D&#39; to look back 5 days from today (0 days ago).
        /// </summary>
        /// <value>Shorthand for the time interval used to select result data. This must be a dot-separated string              specifying a start and end date, for example &#39;5D.0D&#39; to look back 5 days from today (0 days ago).</value>
        [DataMember(Name = "quoteInterval", EmitDefaultValue = true)]
        public string QuoteInterval { get; set; }

        /// <summary>
        /// The AsAt predicate specification.
        /// </summary>
        /// <value>The AsAt predicate specification.</value>
        [DataMember(Name = "asAt", EmitDefaultValue = true)]
        public DateTimeOffset? AsAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResultDataKeyRule {\n");
            sb.Append("  ResourceKey: ").Append(ResourceKey).Append("\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  DataScope: ").Append(DataScope).Append("\n");
            sb.Append("  DocumentCode: ").Append(DocumentCode).Append("\n");
            sb.Append("  QuoteInterval: ").Append(QuoteInterval).Append("\n");
            sb.Append("  AsAt: ").Append(AsAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResultDataKeyRule);
        }

        /// <summary>
        /// Returns true if ResultDataKeyRule instances are equal
        /// </summary>
        /// <param name="input">Instance of ResultDataKeyRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResultDataKeyRule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResourceKey == input.ResourceKey ||
                    (this.ResourceKey != null &&
                    this.ResourceKey.Equals(input.ResourceKey))
                ) && 
                (
                    this.Supplier == input.Supplier ||
                    (this.Supplier != null &&
                    this.Supplier.Equals(input.Supplier))
                ) && 
                (
                    this.DataScope == input.DataScope ||
                    (this.DataScope != null &&
                    this.DataScope.Equals(input.DataScope))
                ) && 
                (
                    this.DocumentCode == input.DocumentCode ||
                    (this.DocumentCode != null &&
                    this.DocumentCode.Equals(input.DocumentCode))
                ) && 
                (
                    this.QuoteInterval == input.QuoteInterval ||
                    (this.QuoteInterval != null &&
                    this.QuoteInterval.Equals(input.QuoteInterval))
                ) && 
                (
                    this.AsAt == input.AsAt ||
                    (this.AsAt != null &&
                    this.AsAt.Equals(input.AsAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResourceKey != null)
                    hashCode = hashCode * 59 + this.ResourceKey.GetHashCode();
                if (this.Supplier != null)
                    hashCode = hashCode * 59 + this.Supplier.GetHashCode();
                if (this.DataScope != null)
                    hashCode = hashCode * 59 + this.DataScope.GetHashCode();
                if (this.DocumentCode != null)
                    hashCode = hashCode * 59 + this.DocumentCode.GetHashCode();
                if (this.QuoteInterval != null)
                    hashCode = hashCode * 59 + this.QuoteInterval.GetHashCode();
                if (this.AsAt != null)
                    hashCode = hashCode * 59 + this.AsAt.GetHashCode();
                return hashCode;
            }
        }

    }
}
