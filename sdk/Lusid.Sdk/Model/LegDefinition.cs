/*
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3439
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// Definition of the set of flow and index conventions along with other miscellaneous information required to generate an instrument leg.
    /// </summary>
    [DataContract(Name = "LegDefinition")]
    public partial class LegDefinition : IEquatable<LegDefinition>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LegDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LegDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LegDefinition" /> class.
        /// </summary>
        /// <param name="conventionName">conventionName.</param>
        /// <param name="conventions">conventions.</param>
        /// <param name="indexConvention">indexConvention.</param>
        /// <param name="indexConventionName">indexConventionName.</param>
        /// <param name="notionalExchangeType">what type of notional exchange does the leg have  Supported string (enumeration) values are: [None, Initial, Final, Both]. (required).</param>
        /// <param name="payReceive">Is the leg to be paid or received  Supported string (enumeration) values are: [Pay, Receive]. (required).</param>
        /// <param name="rateOrSpread">Is there either a fixed rate (non-zero) or spread to be paid over the value of the leg. (required).</param>
        /// <param name="resetConvention">Control how resets are generated relative to swap payment convention(s).  Supported string (enumeration) values are: [InAdvance, InArrears]..</param>
        /// <param name="stubType">If a stub is required should it be at the front or back of the leg.  Supported string (enumeration) values are: [None, ShortFront, ShortBack, LongBack, LongFront]. (required).</param>
        public LegDefinition(FlowConventionName conventionName = default(FlowConventionName), FlowConventions conventions = default(FlowConventions), IndexConvention indexConvention = default(IndexConvention), FlowConventionName indexConventionName = default(FlowConventionName), string notionalExchangeType = default(string), string payReceive = default(string), decimal rateOrSpread = default(decimal), string resetConvention = default(string), string stubType = default(string))
        {
            // to ensure "notionalExchangeType" is required (not null)
            this.NotionalExchangeType = notionalExchangeType ?? throw new ArgumentNullException("notionalExchangeType is a required property for LegDefinition and cannot be null");
            // to ensure "payReceive" is required (not null)
            this.PayReceive = payReceive ?? throw new ArgumentNullException("payReceive is a required property for LegDefinition and cannot be null");
            this.RateOrSpread = rateOrSpread;
            // to ensure "stubType" is required (not null)
            this.StubType = stubType ?? throw new ArgumentNullException("stubType is a required property for LegDefinition and cannot be null");
            this.ConventionName = conventionName;
            this.Conventions = conventions;
            this.IndexConvention = indexConvention;
            this.IndexConventionName = indexConventionName;
            this.ResetConvention = resetConvention;
        }

        /// <summary>
        /// Gets or Sets ConventionName
        /// </summary>
        [DataMember(Name = "conventionName", EmitDefaultValue = false)]
        public FlowConventionName ConventionName { get; set; }

        /// <summary>
        /// Gets or Sets Conventions
        /// </summary>
        [DataMember(Name = "conventions", EmitDefaultValue = false)]
        public FlowConventions Conventions { get; set; }

        /// <summary>
        /// Gets or Sets IndexConvention
        /// </summary>
        [DataMember(Name = "indexConvention", EmitDefaultValue = false)]
        public IndexConvention IndexConvention { get; set; }

        /// <summary>
        /// Gets or Sets IndexConventionName
        /// </summary>
        [DataMember(Name = "indexConventionName", EmitDefaultValue = false)]
        public FlowConventionName IndexConventionName { get; set; }

        /// <summary>
        /// what type of notional exchange does the leg have  Supported string (enumeration) values are: [None, Initial, Final, Both].
        /// </summary>
        /// <value>what type of notional exchange does the leg have  Supported string (enumeration) values are: [None, Initial, Final, Both].</value>
        [DataMember(Name = "notionalExchangeType", IsRequired = true, EmitDefaultValue = false)]
        public string NotionalExchangeType { get; set; }

        /// <summary>
        /// Is the leg to be paid or received  Supported string (enumeration) values are: [Pay, Receive].
        /// </summary>
        /// <value>Is the leg to be paid or received  Supported string (enumeration) values are: [Pay, Receive].</value>
        [DataMember(Name = "payReceive", IsRequired = true, EmitDefaultValue = false)]
        public string PayReceive { get; set; }

        /// <summary>
        /// Is there either a fixed rate (non-zero) or spread to be paid over the value of the leg.
        /// </summary>
        /// <value>Is there either a fixed rate (non-zero) or spread to be paid over the value of the leg.</value>
        [DataMember(Name = "rateOrSpread", IsRequired = true, EmitDefaultValue = true)]
        public decimal RateOrSpread { get; set; }

        /// <summary>
        /// Control how resets are generated relative to swap payment convention(s).  Supported string (enumeration) values are: [InAdvance, InArrears].
        /// </summary>
        /// <value>Control how resets are generated relative to swap payment convention(s).  Supported string (enumeration) values are: [InAdvance, InArrears].</value>
        [DataMember(Name = "resetConvention", EmitDefaultValue = true)]
        public string ResetConvention { get; set; }

        /// <summary>
        /// If a stub is required should it be at the front or back of the leg.  Supported string (enumeration) values are: [None, ShortFront, ShortBack, LongBack, LongFront].
        /// </summary>
        /// <value>If a stub is required should it be at the front or back of the leg.  Supported string (enumeration) values are: [None, ShortFront, ShortBack, LongBack, LongFront].</value>
        [DataMember(Name = "stubType", IsRequired = true, EmitDefaultValue = false)]
        public string StubType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LegDefinition {\n");
            sb.Append("  ConventionName: ").Append(ConventionName).Append("\n");
            sb.Append("  Conventions: ").Append(Conventions).Append("\n");
            sb.Append("  IndexConvention: ").Append(IndexConvention).Append("\n");
            sb.Append("  IndexConventionName: ").Append(IndexConventionName).Append("\n");
            sb.Append("  NotionalExchangeType: ").Append(NotionalExchangeType).Append("\n");
            sb.Append("  PayReceive: ").Append(PayReceive).Append("\n");
            sb.Append("  RateOrSpread: ").Append(RateOrSpread).Append("\n");
            sb.Append("  ResetConvention: ").Append(ResetConvention).Append("\n");
            sb.Append("  StubType: ").Append(StubType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LegDefinition);
        }

        /// <summary>
        /// Returns true if LegDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of LegDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LegDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConventionName == input.ConventionName ||
                    (this.ConventionName != null &&
                    this.ConventionName.Equals(input.ConventionName))
                ) && 
                (
                    this.Conventions == input.Conventions ||
                    (this.Conventions != null &&
                    this.Conventions.Equals(input.Conventions))
                ) && 
                (
                    this.IndexConvention == input.IndexConvention ||
                    (this.IndexConvention != null &&
                    this.IndexConvention.Equals(input.IndexConvention))
                ) && 
                (
                    this.IndexConventionName == input.IndexConventionName ||
                    (this.IndexConventionName != null &&
                    this.IndexConventionName.Equals(input.IndexConventionName))
                ) && 
                (
                    this.NotionalExchangeType == input.NotionalExchangeType ||
                    (this.NotionalExchangeType != null &&
                    this.NotionalExchangeType.Equals(input.NotionalExchangeType))
                ) && 
                (
                    this.PayReceive == input.PayReceive ||
                    (this.PayReceive != null &&
                    this.PayReceive.Equals(input.PayReceive))
                ) && 
                (
                    this.RateOrSpread == input.RateOrSpread ||
                    this.RateOrSpread.Equals(input.RateOrSpread)
                ) && 
                (
                    this.ResetConvention == input.ResetConvention ||
                    (this.ResetConvention != null &&
                    this.ResetConvention.Equals(input.ResetConvention))
                ) && 
                (
                    this.StubType == input.StubType ||
                    (this.StubType != null &&
                    this.StubType.Equals(input.StubType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConventionName != null)
                    hashCode = hashCode * 59 + this.ConventionName.GetHashCode();
                if (this.Conventions != null)
                    hashCode = hashCode * 59 + this.Conventions.GetHashCode();
                if (this.IndexConvention != null)
                    hashCode = hashCode * 59 + this.IndexConvention.GetHashCode();
                if (this.IndexConventionName != null)
                    hashCode = hashCode * 59 + this.IndexConventionName.GetHashCode();
                if (this.NotionalExchangeType != null)
                    hashCode = hashCode * 59 + this.NotionalExchangeType.GetHashCode();
                if (this.PayReceive != null)
                    hashCode = hashCode * 59 + this.PayReceive.GetHashCode();
                hashCode = hashCode * 59 + this.RateOrSpread.GetHashCode();
                if (this.ResetConvention != null)
                    hashCode = hashCode * 59 + this.ResetConvention.GetHashCode();
                if (this.StubType != null)
                    hashCode = hashCode * 59 + this.StubType.GetHashCode();
                return hashCode;
            }
        }

    }
}
