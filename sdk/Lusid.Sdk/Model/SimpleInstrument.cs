/*
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3438
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// IL SimpleInstrument Instrument; Lusid-ibor internal representation of a SimpleInstrument instrument
    /// </summary>
    [DataContract(Name = "SimpleInstrument")]
    [JsonConverter(typeof(JsonSubtypes), "InstrumentType")]
    public partial class SimpleInstrument : LusidInstrument, IEquatable<SimpleInstrument>
    {
        /// <summary>
        /// The available values are: InterestRates, FX, Inflation, Equities, Credit, Commodities, Unknown
        /// </summary>
        /// <value>The available values are: InterestRates, FX, Inflation, Equities, Credit, Commodities, Unknown</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AssetClassEnum
        {
            /// <summary>
            /// Enum InterestRates for value: InterestRates
            /// </summary>
            [EnumMember(Value = "InterestRates")]
            InterestRates = 1,

            /// <summary>
            /// Enum FX for value: FX
            /// </summary>
            [EnumMember(Value = "FX")]
            FX = 2,

            /// <summary>
            /// Enum Inflation for value: Inflation
            /// </summary>
            [EnumMember(Value = "Inflation")]
            Inflation = 3,

            /// <summary>
            /// Enum Equities for value: Equities
            /// </summary>
            [EnumMember(Value = "Equities")]
            Equities = 4,

            /// <summary>
            /// Enum Credit for value: Credit
            /// </summary>
            [EnumMember(Value = "Credit")]
            Credit = 5,

            /// <summary>
            /// Enum Commodities for value: Commodities
            /// </summary>
            [EnumMember(Value = "Commodities")]
            Commodities = 6,

            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 7

        }


        /// <summary>
        /// The available values are: InterestRates, FX, Inflation, Equities, Credit, Commodities, Unknown
        /// </summary>
        /// <value>The available values are: InterestRates, FX, Inflation, Equities, Credit, Commodities, Unknown</value>
        [DataMember(Name = "assetClass", IsRequired = true, EmitDefaultValue = false)]
        public AssetClassEnum AssetClass { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleInstrument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SimpleInstrument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleInstrument" /> class.
        /// </summary>
        /// <param name="maturityDate">The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date.</param>
        /// <param name="domCcy">The domestic currency (required).</param>
        /// <param name="assetClass">The available values are: InterestRates, FX, Inflation, Equities, Credit, Commodities, Unknown (required).</param>
        /// <param name="fgnCcys">The set of foreign currencies, if any (optional).</param>
        /// <param name="simpleInstrumentType">The Instrument type of the simple instrument (required).</param>
        /// <param name="instrumentType">The available values are: QuotedSecurity, InterestRateSwap, FxForward, Future, ExoticInstrument, FxOption, CreditDefaultSwap, InterestRateSwaption, Bond, EquityOption, FixedLeg, FloatingLeg, BespokeCashFlowsLeg, Unknown, TermDeposit, ContractForDifference, EquitySwap, CashPerpetual, CashSettled, CdsIndex, Basket, FundingLeg, CrossCurrencySwap, FxSwap, ForwardRateAgreement, SimpleInstrument, Repo (required) (default to &quot;SimpleInstrument&quot;).</param>
        public SimpleInstrument(DateTimeOffset maturityDate = default(DateTimeOffset), string domCcy = default(string), AssetClassEnum assetClass = default(AssetClassEnum), List<string> fgnCcys = default(List<string>), string simpleInstrumentType = default(string), InstrumentTypeEnum instrumentType = default(InstrumentTypeEnum)) : base(instrumentType)
        {
            // to ensure "domCcy" is required (not null)
            this.DomCcy = domCcy ?? throw new ArgumentNullException("domCcy is a required property for SimpleInstrument and cannot be null");
            this.AssetClass = assetClass;
            // to ensure "simpleInstrumentType" is required (not null)
            this.SimpleInstrumentType = simpleInstrumentType ?? throw new ArgumentNullException("simpleInstrumentType is a required property for SimpleInstrument and cannot be null");
            this.MaturityDate = maturityDate;
            this.FgnCcys = fgnCcys;
        }

        /// <summary>
        /// The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date
        /// </summary>
        /// <value>The final maturity date of the instrument. This means the last date on which the instruments makes a payment of any amount.  For the avoidance of doubt, that is not necessarily prior to its last sensitivity date for the purposes of risk; e.g. instruments such as  Constant Maturity Swaps (CMS) often have sensitivities to rates beyond their last payment date</value>
        [DataMember(Name = "maturityDate", EmitDefaultValue = false)]
        public DateTimeOffset MaturityDate { get; set; }

        /// <summary>
        /// The domestic currency
        /// </summary>
        /// <value>The domestic currency</value>
        [DataMember(Name = "domCcy", IsRequired = true, EmitDefaultValue = false)]
        public string DomCcy { get; set; }

        /// <summary>
        /// The set of foreign currencies, if any (optional)
        /// </summary>
        /// <value>The set of foreign currencies, if any (optional)</value>
        [DataMember(Name = "fgnCcys", EmitDefaultValue = true)]
        public List<string> FgnCcys { get; set; }

        /// <summary>
        /// The Instrument type of the simple instrument
        /// </summary>
        /// <value>The Instrument type of the simple instrument</value>
        [DataMember(Name = "simpleInstrumentType", IsRequired = true, EmitDefaultValue = false)]
        public string SimpleInstrumentType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SimpleInstrument {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  MaturityDate: ").Append(MaturityDate).Append("\n");
            sb.Append("  DomCcy: ").Append(DomCcy).Append("\n");
            sb.Append("  AssetClass: ").Append(AssetClass).Append("\n");
            sb.Append("  FgnCcys: ").Append(FgnCcys).Append("\n");
            sb.Append("  SimpleInstrumentType: ").Append(SimpleInstrumentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimpleInstrument);
        }

        /// <summary>
        /// Returns true if SimpleInstrument instances are equal
        /// </summary>
        /// <param name="input">Instance of SimpleInstrument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimpleInstrument input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.MaturityDate == input.MaturityDate ||
                    (this.MaturityDate != null &&
                    this.MaturityDate.Equals(input.MaturityDate))
                ) && base.Equals(input) && 
                (
                    this.DomCcy == input.DomCcy ||
                    (this.DomCcy != null &&
                    this.DomCcy.Equals(input.DomCcy))
                ) && base.Equals(input) && 
                (
                    this.AssetClass == input.AssetClass ||
                    this.AssetClass.Equals(input.AssetClass)
                ) && base.Equals(input) && 
                (
                    this.FgnCcys == input.FgnCcys ||
                    this.FgnCcys != null &&
                    input.FgnCcys != null &&
                    this.FgnCcys.SequenceEqual(input.FgnCcys)
                ) && base.Equals(input) && 
                (
                    this.SimpleInstrumentType == input.SimpleInstrumentType ||
                    (this.SimpleInstrumentType != null &&
                    this.SimpleInstrumentType.Equals(input.SimpleInstrumentType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.MaturityDate != null)
                    hashCode = hashCode * 59 + this.MaturityDate.GetHashCode();
                if (this.DomCcy != null)
                    hashCode = hashCode * 59 + this.DomCcy.GetHashCode();
                hashCode = hashCode * 59 + this.AssetClass.GetHashCode();
                if (this.FgnCcys != null)
                    hashCode = hashCode * 59 + this.FgnCcys.GetHashCode();
                if (this.SimpleInstrumentType != null)
                    hashCode = hashCode * 59 + this.SimpleInstrumentType.GetHashCode();
                return hashCode;
            }
        }

    }
}
