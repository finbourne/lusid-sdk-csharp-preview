/*
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3438
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// A rule that identifies the set of preferences to be used for a given library, model and instrument type.  There can be many such rules, though only the first found for a given combination would be used.
    /// </summary>
    [DataContract(Name = "VendorModelRule")]
    public partial class VendorModelRule : IEquatable<VendorModelRule>
    {
        /// <summary>
        /// The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds
        /// </summary>
        /// <value>The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SupplierEnum
        {
            /// <summary>
            /// Enum Lusid for value: Lusid
            /// </summary>
            [EnumMember(Value = "Lusid")]
            Lusid = 1,

            /// <summary>
            /// Enum RefinitivQps for value: RefinitivQps
            /// </summary>
            [EnumMember(Value = "RefinitivQps")]
            RefinitivQps = 2,

            /// <summary>
            /// Enum RefinitivTracsWeb for value: RefinitivTracsWeb
            /// </summary>
            [EnumMember(Value = "RefinitivTracsWeb")]
            RefinitivTracsWeb = 3,

            /// <summary>
            /// Enum VolMaster for value: VolMaster
            /// </summary>
            [EnumMember(Value = "VolMaster")]
            VolMaster = 4,

            /// <summary>
            /// Enum IsdaCds for value: IsdaCds
            /// </summary>
            [EnumMember(Value = "IsdaCds")]
            IsdaCds = 5

        }


        /// <summary>
        /// The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds
        /// </summary>
        /// <value>The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds</value>
        [DataMember(Name = "supplier", IsRequired = true, EmitDefaultValue = false)]
        public SupplierEnum Supplier { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorModelRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VendorModelRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorModelRule" /> class.
        /// </summary>
        /// <param name="supplier">The available values are: Lusid, RefinitivQps, RefinitivTracsWeb, VolMaster, IsdaCds (required).</param>
        /// <param name="modelName">The vendor library model name (required).</param>
        /// <param name="instrumentType">The vendor library instrument type (required).</param>
        /// <param name="parameters">The set of opaque model parameters, provided as a Json object, that is a string object which will internally be converted to a dictionary of string to object.  Note that this is not intended as the final form of this object. It will be replaced with a more structured object as the set of parameters that are possible is  better understood. (required).</param>
        public VendorModelRule(SupplierEnum supplier = default(SupplierEnum), string modelName = default(string), string instrumentType = default(string), string parameters = default(string))
        {
            this.Supplier = supplier;
            // to ensure "modelName" is required (not null)
            this.ModelName = modelName ?? throw new ArgumentNullException("modelName is a required property for VendorModelRule and cannot be null");
            // to ensure "instrumentType" is required (not null)
            this.InstrumentType = instrumentType ?? throw new ArgumentNullException("instrumentType is a required property for VendorModelRule and cannot be null");
            // to ensure "parameters" is required (not null)
            this.Parameters = parameters ?? throw new ArgumentNullException("parameters is a required property for VendorModelRule and cannot be null");
        }

        /// <summary>
        /// The vendor library model name
        /// </summary>
        /// <value>The vendor library model name</value>
        [DataMember(Name = "modelName", IsRequired = true, EmitDefaultValue = false)]
        public string ModelName { get; set; }

        /// <summary>
        /// The vendor library instrument type
        /// </summary>
        /// <value>The vendor library instrument type</value>
        [DataMember(Name = "instrumentType", IsRequired = true, EmitDefaultValue = false)]
        public string InstrumentType { get; set; }

        /// <summary>
        /// The set of opaque model parameters, provided as a Json object, that is a string object which will internally be converted to a dictionary of string to object.  Note that this is not intended as the final form of this object. It will be replaced with a more structured object as the set of parameters that are possible is  better understood.
        /// </summary>
        /// <value>The set of opaque model parameters, provided as a Json object, that is a string object which will internally be converted to a dictionary of string to object.  Note that this is not intended as the final form of this object. It will be replaced with a more structured object as the set of parameters that are possible is  better understood.</value>
        [DataMember(Name = "parameters", IsRequired = true, EmitDefaultValue = false)]
        public string Parameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VendorModelRule {\n");
            sb.Append("  Supplier: ").Append(Supplier).Append("\n");
            sb.Append("  ModelName: ").Append(ModelName).Append("\n");
            sb.Append("  InstrumentType: ").Append(InstrumentType).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VendorModelRule);
        }

        /// <summary>
        /// Returns true if VendorModelRule instances are equal
        /// </summary>
        /// <param name="input">Instance of VendorModelRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VendorModelRule input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Supplier == input.Supplier ||
                    this.Supplier.Equals(input.Supplier)
                ) && 
                (
                    this.ModelName == input.ModelName ||
                    (this.ModelName != null &&
                    this.ModelName.Equals(input.ModelName))
                ) && 
                (
                    this.InstrumentType == input.InstrumentType ||
                    (this.InstrumentType != null &&
                    this.InstrumentType.Equals(input.InstrumentType))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    (this.Parameters != null &&
                    this.Parameters.Equals(input.Parameters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Supplier.GetHashCode();
                if (this.ModelName != null)
                    hashCode = hashCode * 59 + this.ModelName.GetHashCode();
                if (this.InstrumentType != null)
                    hashCode = hashCode * 59 + this.InstrumentType.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                return hashCode;
            }
        }

    }
}
