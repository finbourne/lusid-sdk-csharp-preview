/*
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3439
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// DateAttributes
    /// </summary>
    [DataContract(Name = "DateAttributes")]
    public partial class DateAttributes : IEquatable<DateAttributes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DateAttributes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DateAttributes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DateAttributes" /> class.
        /// </summary>
        /// <param name="irregular">irregular (required).</param>
        /// <param name="irregularSession">irregularSession (required).</param>
        /// <param name="newHours">newHours (required).</param>
        /// <param name="activity">activity.</param>
        /// <param name="firstOpen">firstOpen.</param>
        /// <param name="lastOpen">lastOpen.</param>
        /// <param name="firstClose">firstClose.</param>
        /// <param name="lastClose">lastClose.</param>
        public DateAttributes(bool irregular = default(bool), bool irregularSession = default(bool), bool newHours = default(bool), string activity = default(string), string firstOpen = default(string), string lastOpen = default(string), string firstClose = default(string), string lastClose = default(string))
        {
            this.Irregular = irregular;
            this.IrregularSession = irregularSession;
            this.NewHours = newHours;
            this.Activity = activity;
            this.FirstOpen = firstOpen;
            this.LastOpen = lastOpen;
            this.FirstClose = firstClose;
            this.LastClose = lastClose;
        }

        /// <summary>
        /// Gets or Sets Irregular
        /// </summary>
        [DataMember(Name = "irregular", IsRequired = true, EmitDefaultValue = true)]
        public bool Irregular { get; set; }

        /// <summary>
        /// Gets or Sets IrregularSession
        /// </summary>
        [DataMember(Name = "irregularSession", IsRequired = true, EmitDefaultValue = true)]
        public bool IrregularSession { get; set; }

        /// <summary>
        /// Gets or Sets NewHours
        /// </summary>
        [DataMember(Name = "newHours", IsRequired = true, EmitDefaultValue = true)]
        public bool NewHours { get; set; }

        /// <summary>
        /// Gets or Sets Activity
        /// </summary>
        [DataMember(Name = "activity", EmitDefaultValue = true)]
        public string Activity { get; set; }

        /// <summary>
        /// Gets or Sets FirstOpen
        /// </summary>
        [DataMember(Name = "firstOpen", EmitDefaultValue = true)]
        public string FirstOpen { get; set; }

        /// <summary>
        /// Gets or Sets LastOpen
        /// </summary>
        [DataMember(Name = "lastOpen", EmitDefaultValue = true)]
        public string LastOpen { get; set; }

        /// <summary>
        /// Gets or Sets FirstClose
        /// </summary>
        [DataMember(Name = "firstClose", EmitDefaultValue = true)]
        public string FirstClose { get; set; }

        /// <summary>
        /// Gets or Sets LastClose
        /// </summary>
        [DataMember(Name = "lastClose", EmitDefaultValue = true)]
        public string LastClose { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DateAttributes {\n");
            sb.Append("  Irregular: ").Append(Irregular).Append("\n");
            sb.Append("  IrregularSession: ").Append(IrregularSession).Append("\n");
            sb.Append("  NewHours: ").Append(NewHours).Append("\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  FirstOpen: ").Append(FirstOpen).Append("\n");
            sb.Append("  LastOpen: ").Append(LastOpen).Append("\n");
            sb.Append("  FirstClose: ").Append(FirstClose).Append("\n");
            sb.Append("  LastClose: ").Append(LastClose).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DateAttributes);
        }

        /// <summary>
        /// Returns true if DateAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of DateAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DateAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Irregular == input.Irregular ||
                    this.Irregular.Equals(input.Irregular)
                ) && 
                (
                    this.IrregularSession == input.IrregularSession ||
                    this.IrregularSession.Equals(input.IrregularSession)
                ) && 
                (
                    this.NewHours == input.NewHours ||
                    this.NewHours.Equals(input.NewHours)
                ) && 
                (
                    this.Activity == input.Activity ||
                    (this.Activity != null &&
                    this.Activity.Equals(input.Activity))
                ) && 
                (
                    this.FirstOpen == input.FirstOpen ||
                    (this.FirstOpen != null &&
                    this.FirstOpen.Equals(input.FirstOpen))
                ) && 
                (
                    this.LastOpen == input.LastOpen ||
                    (this.LastOpen != null &&
                    this.LastOpen.Equals(input.LastOpen))
                ) && 
                (
                    this.FirstClose == input.FirstClose ||
                    (this.FirstClose != null &&
                    this.FirstClose.Equals(input.FirstClose))
                ) && 
                (
                    this.LastClose == input.LastClose ||
                    (this.LastClose != null &&
                    this.LastClose.Equals(input.LastClose))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Irregular.GetHashCode();
                hashCode = hashCode * 59 + this.IrregularSession.GetHashCode();
                hashCode = hashCode * 59 + this.NewHours.GetHashCode();
                if (this.Activity != null)
                    hashCode = hashCode * 59 + this.Activity.GetHashCode();
                if (this.FirstOpen != null)
                    hashCode = hashCode * 59 + this.FirstOpen.GetHashCode();
                if (this.LastOpen != null)
                    hashCode = hashCode * 59 + this.LastOpen.GetHashCode();
                if (this.FirstClose != null)
                    hashCode = hashCode * 59 + this.FirstClose.GetHashCode();
                if (this.LastClose != null)
                    hashCode = hashCode * 59 + this.LastClose.GetHashCode();
                return hashCode;
            }
        }

    }
}
