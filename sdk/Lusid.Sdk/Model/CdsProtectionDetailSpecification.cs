/*
 * LUSID API
 *
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | - -- -- | - -- -- | - -- - | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3438
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Lusid.Sdk.Client.OpenAPIDateConverter;

namespace Lusid.Sdk.Model
{
    /// <summary>
    /// CDSs generally conform to fairly standard definitions, but can be tweaked in a number of different ways.  This class gathers a number of common features which may deviate. These will default to the market standard when  no overrides are provided
    /// </summary>
    [DataContract(Name = "CdsProtectionDetailSpecification")]
    public partial class CdsProtectionDetailSpecification : IEquatable<CdsProtectionDetailSpecification>
    {
        /// <summary>
        /// The available values are: Unknown, SNR, SUB, JRSUBUT2, PREFT1, SECDOM, SNRFOR, SUBLT2
        /// </summary>
        /// <value>The available values are: Unknown, SNR, SUB, JRSUBUT2, PREFT1, SECDOM, SNRFOR, SUBLT2</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SeniorityEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum SNR for value: SNR
            /// </summary>
            [EnumMember(Value = "SNR")]
            SNR = 2,

            /// <summary>
            /// Enum SUB for value: SUB
            /// </summary>
            [EnumMember(Value = "SUB")]
            SUB = 3,

            /// <summary>
            /// Enum JRSUBUT2 for value: JRSUBUT2
            /// </summary>
            [EnumMember(Value = "JRSUBUT2")]
            JRSUBUT2 = 4,

            /// <summary>
            /// Enum PREFT1 for value: PREFT1
            /// </summary>
            [EnumMember(Value = "PREFT1")]
            PREFT1 = 5,

            /// <summary>
            /// Enum SECDOM for value: SECDOM
            /// </summary>
            [EnumMember(Value = "SECDOM")]
            SECDOM = 6,

            /// <summary>
            /// Enum SNRFOR for value: SNRFOR
            /// </summary>
            [EnumMember(Value = "SNRFOR")]
            SNRFOR = 7,

            /// <summary>
            /// Enum SUBLT2 for value: SUBLT2
            /// </summary>
            [EnumMember(Value = "SUBLT2")]
            SUBLT2 = 8

        }


        /// <summary>
        /// The available values are: Unknown, SNR, SUB, JRSUBUT2, PREFT1, SECDOM, SNRFOR, SUBLT2
        /// </summary>
        /// <value>The available values are: Unknown, SNR, SUB, JRSUBUT2, PREFT1, SECDOM, SNRFOR, SUBLT2</value>
        [DataMember(Name = "seniority", IsRequired = true, EmitDefaultValue = false)]
        public SeniorityEnum Seniority { get; set; }
        /// <summary>
        /// The available values are: Unknown, CR, MR, MM, XR
        /// </summary>
        /// <value>The available values are: Unknown, CR, MR, MM, XR</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RestructuringTypeEnum
        {
            /// <summary>
            /// Enum Unknown for value: Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            Unknown = 1,

            /// <summary>
            /// Enum CR for value: CR
            /// </summary>
            [EnumMember(Value = "CR")]
            CR = 2,

            /// <summary>
            /// Enum MR for value: MR
            /// </summary>
            [EnumMember(Value = "MR")]
            MR = 3,

            /// <summary>
            /// Enum MM for value: MM
            /// </summary>
            [EnumMember(Value = "MM")]
            MM = 4,

            /// <summary>
            /// Enum XR for value: XR
            /// </summary>
            [EnumMember(Value = "XR")]
            XR = 5

        }


        /// <summary>
        /// The available values are: Unknown, CR, MR, MM, XR
        /// </summary>
        /// <value>The available values are: Unknown, CR, MR, MM, XR</value>
        [DataMember(Name = "restructuringType", IsRequired = true, EmitDefaultValue = false)]
        public RestructuringTypeEnum RestructuringType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CdsProtectionDetailSpecification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CdsProtectionDetailSpecification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CdsProtectionDetailSpecification" /> class.
        /// </summary>
        /// <param name="seniority">The available values are: Unknown, SNR, SUB, JRSUBUT2, PREFT1, SECDOM, SNRFOR, SUBLT2 (required).</param>
        /// <param name="restructuringType">The available values are: Unknown, CR, MR, MM, XR (required).</param>
        /// <param name="protectStartDay">Does the protection leg pay out in the case of default on the start date (required).</param>
        /// <param name="payAccruedInterestOnDefault">Should accrued interest on the premium leg be paid if a credit event occurs (required).</param>
        public CdsProtectionDetailSpecification(SeniorityEnum seniority = default(SeniorityEnum), RestructuringTypeEnum restructuringType = default(RestructuringTypeEnum), bool protectStartDay = default(bool), bool payAccruedInterestOnDefault = default(bool))
        {
            this.Seniority = seniority;
            this.RestructuringType = restructuringType;
            this.ProtectStartDay = protectStartDay;
            this.PayAccruedInterestOnDefault = payAccruedInterestOnDefault;
        }

        /// <summary>
        /// Does the protection leg pay out in the case of default on the start date
        /// </summary>
        /// <value>Does the protection leg pay out in the case of default on the start date</value>
        [DataMember(Name = "protectStartDay", IsRequired = true, EmitDefaultValue = true)]
        public bool ProtectStartDay { get; set; }

        /// <summary>
        /// Should accrued interest on the premium leg be paid if a credit event occurs
        /// </summary>
        /// <value>Should accrued interest on the premium leg be paid if a credit event occurs</value>
        [DataMember(Name = "payAccruedInterestOnDefault", IsRequired = true, EmitDefaultValue = true)]
        public bool PayAccruedInterestOnDefault { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CdsProtectionDetailSpecification {\n");
            sb.Append("  Seniority: ").Append(Seniority).Append("\n");
            sb.Append("  RestructuringType: ").Append(RestructuringType).Append("\n");
            sb.Append("  ProtectStartDay: ").Append(ProtectStartDay).Append("\n");
            sb.Append("  PayAccruedInterestOnDefault: ").Append(PayAccruedInterestOnDefault).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CdsProtectionDetailSpecification);
        }

        /// <summary>
        /// Returns true if CdsProtectionDetailSpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of CdsProtectionDetailSpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CdsProtectionDetailSpecification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Seniority == input.Seniority ||
                    this.Seniority.Equals(input.Seniority)
                ) && 
                (
                    this.RestructuringType == input.RestructuringType ||
                    this.RestructuringType.Equals(input.RestructuringType)
                ) && 
                (
                    this.ProtectStartDay == input.ProtectStartDay ||
                    this.ProtectStartDay.Equals(input.ProtectStartDay)
                ) && 
                (
                    this.PayAccruedInterestOnDefault == input.PayAccruedInterestOnDefault ||
                    this.PayAccruedInterestOnDefault.Equals(input.PayAccruedInterestOnDefault)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Seniority.GetHashCode();
                hashCode = hashCode * 59 + this.RestructuringType.GetHashCode();
                hashCode = hashCode * 59 + this.ProtectStartDay.GetHashCode();
                hashCode = hashCode * 59 + this.PayAccruedInterestOnDefault.GetHashCode();
                return hashCode;
            }
        }

    }
}
